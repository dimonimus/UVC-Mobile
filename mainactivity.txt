MainActivity.java — это основной класс моего Android-конвертера для конвертации видеофайлов, использующий библиотеку FFmpeg.
-Позволяет пользователю выбрать видеофайл, конвертировать его в другой формат (mp4, avi, mkv, wmv) с выбором видео- и аудиокодеков, битрейта, и воспроизвести исходное видео.
-Поддерживает асинхронную конвертацию с отображением логов и возможностью отмены.
-Реализует выбор файла через Intent.ACTION_GET_CONTENT* пользователь выбирает видео, которое копируется во временный файл.
(Intent.ACTION_GET_CONTENT — это действие в Android, которое позволяет пользователю выбрать определённый тип данных и вернуть их.)
Учитывайте ,что для работы приложения требуется  доступ к хранилищу для чтения/записи файлов.
Исходный код:
Mainactivity.java 
package com.example.converter;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import com.arthenica.mobileffmpeg.Config;
import com.arthenica.mobileffmpeg.FFmpeg;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;

public class MainActivity extends AppCompatActivity {
    private static final int PICK_FILE_REQUEST_CODE = 1;
    private static final int STORAGE_PERMISSION_CODE = 100;
    private Uri inputUri;
    private TextView statusText;
    private Button openButton;
    private Button convertButton;
    private Button playButton;
    private Spinner formatSpinner;
    private Spinner videoCodecSpinner;
    private Spinner audioCodecSpinner;
    private Spinner bitrateSpinner;
    private final Handler handler = new Handler(Looper.getMainLooper());
    private long executionId;
    private File tempInputFile;

    // Доступные форматы
    private final String[] formats = {"mp4", "avi", "mkv", "wmv"};

    // Доступные видеокодеки для каждого формата
    private final Map<String, String[]> videoCodecs = new LinkedHashMap<String, String[]>() {{
        put("mp4", new String[]{"libx264", "libx265", "mpeg4"});
        put("avi", new String[]{"mpeg4", "h264", "mjpeg"});
        put("mkv", new String[]{"libx264", "libx265", "vp9"});
        put("wmv", new String[]{"wmv2", "msmpeg4", "wmv1"});
    }};

    // Доступные аудиокодеки для каждого формата
    private final Map<String, String[]> audioCodecs = new LinkedHashMap<String, String[]>() {{
        put("mp4", new String[]{"aac", "libmp3lame", "flac"});
        put("avi", new String[]{"mp3", "aac", "pcm_s16le"});
        put("mkv", new String[]{"aac", "opus", "vorbis"});
        put("wmv", new String[]{"wmav2", "mp3", "aac"});
    }};

    // Доступные битрейты
    private final String[] bitrates = {"500k", "1M", "2M", "5M", "10M", "20M"};

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initializeViews();
        setupSpinners();
        setupButtonListeners();

        Config.enableLogCallback(message ->
                handler.post(() -> statusText.append("\n" + message.getText())));
    }

    private void initializeViews() {
        openButton = findViewById(R.id.openButton);
        convertButton = findViewById(R.id.convertButton);
        playButton = findViewById(R.id.playButton);
        statusText = findViewById(R.id.statusText);
        formatSpinner = findViewById(R.id.formatSpinner);
        videoCodecSpinner = findViewById(R.id.videoCodecSpinner);
        audioCodecSpinner = findViewById(R.id.audioCodecSpinner);
        bitrateSpinner = findViewById(R.id.bitrateSpinner);

        // Установка цветов текста
        statusText.setTextColor(Color.BLACK);
        openButton.setTextColor(Color.WHITE);
        convertButton.setTextColor(Color.WHITE);
        playButton.setTextColor(Color.WHITE);

        // Начальное состояние кнопок
        convertButton.setEnabled(false);
    }

    private void setupSpinners() {
        // Настройка спиннера для форматов
        ArrayAdapter<String> formatAdapter = new ArrayAdapter<>(this,
                android.R.layout.simple_spinner_item, formats);
        formatAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        formatSpinner.setAdapter(formatAdapter);
        formatSpinner.setSelection(0); // По умолчанию выбран MP4

        // Настройка спиннера для битрейтов
        ArrayAdapter<String> bitrateAdapter = new ArrayAdapter<>(this,
                android.R.layout.simple_spinner_item, bitrates);
        bitrateAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        bitrateSpinner.setAdapter(bitrateAdapter);
        bitrateSpinner.setSelection(2); // По умолчанию выбран 2M

        // Обновление списков кодеков при изменении формата
        formatSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                updateCodecSpinners();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
            }
        });

        // Инициализация списков кодеков
        updateCodecSpinners();
    }

    private void updateCodecSpinners() {
        String selectedFormat = formats[formatSpinner.getSelectedItemPosition()];

        // Обновление видеокодеков
        String[] availableVideoCodecs = videoCodecs.get(selectedFormat);
        ArrayAdapter<String> videoCodecAdapter = new ArrayAdapter<>(this,
                android.R.layout.simple_spinner_item, availableVideoCodecs);
        videoCodecAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        videoCodecSpinner.setAdapter(videoCodecAdapter);

        // Обновление аудиокодеков
        String[] availableAudioCodecs = audioCodecs.get(selectedFormat);
        ArrayAdapter<String> audioCodecAdapter = new ArrayAdapter<>(this,
                android.R.layout.simple_spinner_item, availableAudioCodecs);
        audioCodecAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        audioCodecSpinner.setAdapter(audioCodecAdapter);
    }

    private void setupButtonListeners() {
        openButton.setOnClickListener(v -> {
            if (!checkPermission()) {
                requestPermission();
            } else {
                openFile();
            }
        });

        convertButton.setOnClickListener(v -> {
            if (!checkPermission()) {
                requestPermission();
            } else {
                convertFile();
            }
        });

        playButton.setOnClickListener(v -> {
            if (inputUri != null) {
                openVideoPlayer(inputUri);
            } else {
                Toast.makeText(this, "Пожалуйста, сначала выберите видеофайл", Toast.LENGTH_SHORT).show();
                openFile();
            }
        });
    }

    private void openVideoPlayer(Uri videoUri) {
        Intent intent = new Intent(this, VideoPlayerActivity.class);
        intent.putExtra("videoUri", videoUri);
        startActivity(intent);
    }

    private boolean checkPermission() {
        return ContextCompat.checkSelfPermission(this,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
    }

    private void requestPermission() {
        ActivityCompat.requestPermissions(this,
                new String[]{
                        Manifest.permission.WRITE_EXTERNAL_STORAGE,
                        Manifest.permission.READ_EXTERNAL_STORAGE
                },
                STORAGE_PERMISSION_CODE);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == STORAGE_PERMISSION_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                openFile();
            } else {
                Toast.makeText(this, "Необходимо разрешение на доступ к хранилищу", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void openFile() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("video/*");
        startActivityForResult(intent, PICK_FILE_REQUEST_CODE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK && data != null && requestCode == PICK_FILE_REQUEST_CODE) {
            inputUri = data.getData();
            try {
                tempInputFile = copyInputFile(inputUri);
                statusText.setText("Выбран файл: " + getFileName(inputUri));
                convertButton.setEnabled(true);
            } catch (Exception e) {
                showError("Ошибка копирования файла: " + e.getMessage());
            }
        }
    }

    private File copyInputFile(Uri uri) throws Exception {
        File tempDir = new File(getCacheDir(), "temp");
        if (!tempDir.exists()) tempDir.mkdirs();

        File tempFile = new File(tempDir, "input_" + System.currentTimeMillis() + ".mp4");

        try (InputStream in = getContentResolver().openInputStream(uri);
             FileOutputStream out = new FileOutputStream(tempFile)) {
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, bytesRead);
            }
            return tempFile;
        }
    }

    private void convertFile() {
        if (inputUri == null || tempInputFile == null) {
            Toast.makeText(this, "Пожалуйста, сначала выберите файл", Toast.LENGTH_SHORT).show();
            return;
        }

        File outputDir = new File(getExternalFilesDir(Environment.DIRECTORY_MOVIES), "ConvertedVideos");
        if (!outputDir.exists() && !outputDir.mkdirs()) {
            outputDir = new File(getCacheDir(), "ConvertedVideos");
            if (!outputDir.exists() && !outputDir.mkdirs()) {
                showError("Не удалось создать выходную директорию");
                return;
            }
        }

        String selectedFormat = formats[formatSpinner.getSelectedItemPosition()];
        String videoCodec = (String) videoCodecSpinner.getSelectedItem();
        String audioCodec = (String) audioCodecSpinner.getSelectedItem();
        String bitrate = (String) bitrateSpinner.getSelectedItem();

        String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US).format(new Date());
        String outputPath = new File(outputDir, "converted_" + timestamp + "." + selectedFormat).getAbsolutePath();

        setupConversionUI();

        String[] command = {
                "-i", tempInputFile.getAbsolutePath(),
                "-c:v", videoCodec,
                "-c:a", audioCodec,
                "-b:v", bitrate,
                "-r", "30",
                outputPath
        };

        executionId = FFmpeg.executeAsync(command, (id, returnCode) -> {
            handler.post(() -> {
                if (returnCode == Config.RETURN_CODE_SUCCESS) {
                    statusText.setText("Конвертация завершена!\nСохранено в: " + outputPath);
                } else {
                    showError("Ошибка конвертации. Код: " + returnCode);
                }
                cleanupTempFile();
                resetUI();
            });
        });
    }

    private void setupConversionUI() {
        openButton.setEnabled(false);
        convertButton.setText("Отмена");
        convertButton.setOnClickListener(v -> FFmpeg.cancel(executionId));
        statusText.setText("Конвертация...");
    }

    private void resetUI() {
        openButton.setEnabled(true);
        convertButton.setText("Конвертировать");
        convertButton.setEnabled(false);
        convertButton.setOnClickListener(v -> convertFile());
        inputUri = null;
        tempInputFile = null;
    }

    private void cleanupTempFile() {
        if (tempInputFile != null && tempInputFile.exists()) {
            tempInputFile.delete();
        }
    }

    private void showError(String message) {
        statusText.setText("Ошибка: " + message);
    }

    private String getFileName(Uri uri) {
        return uri.getLastPathSegment();
    }
}


